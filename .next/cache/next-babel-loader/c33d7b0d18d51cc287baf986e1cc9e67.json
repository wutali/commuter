{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport * as React from \"react\";\nimport { HTMLTransform } from \"@nteract/transforms\";\nimport { Source } from \"@nteract/presentational-components\";\n\nvar d3 = _Object$assign({}, require(\"d3-dsv\"));\n\nvar Text = function Text(props) {\n  return React.createElement(React.Fragment, null, React.createElement(\"code\", {\n    className: \"jsx-2070364236\"\n  }, props.data), React.createElement(_JSXStyle, {\n    id: \"2070364236\"\n  }, [\"code.jsx-2070364236{white-space:pre;}\"]));\n};\n\nvar HokeyTable = function HokeyTable(props) {\n  return React.createElement(React.Fragment, null, React.createElement(_JSXStyle, {\n    id: \"2156236075\"\n  }, [\"table.jsx-2156236075{border-collapse:collapse;border-spacing:0;border-collapse:collapse;border-spacing:0;empty-cells:show;border:1px solid #cbcbcb;max-height:200px;overflow-y:scroll;}\", \"td.jsx-2156236075,th.jsx-2156236075{padding:0;border-left:1px solid #cbcbcb;border-width:0 0 0 1px;font-size:inherit;margin:0;overflow:visible;padding:0.5em 1em;}\", \"td.jsx-2156236075:first-child,th.jsx-2156236075:first-child{border-left-width:0;}\", \"thead.jsx-2156236075{background-color:#e0e0e0;color:#000;text-align:left;vertical-align:bottom;}\"]), React.createElement(\"table\", {\n    className: \"jsx-2156236075\"\n  }, React.createElement(\"thead\", {\n    className: \"jsx-2156236075\"\n  }, React.createElement(\"tr\", {\n    className: \"jsx-2156236075\"\n  }, props.columnNames.map(function (column) {\n    return React.createElement(\"th\", {\n      key: column.index,\n      className: \"jsx-2156236075\"\n    }, column.name);\n  }))), React.createElement(\"tbody\", {\n    className: \"jsx-2156236075\"\n  }, props.rows.map(function (row, idx) {\n    return React.createElement(\"tr\", {\n      key: idx,\n      className: \"jsx-2156236075\"\n    }, row.map(function (item, colIdx) {\n      return React.createElement(\"td\", {\n        key: colIdx,\n        className: \"jsx-2156236075\"\n      }, item);\n    }));\n  }))));\n};\n\nvar DSVTable = function DSVTable(props) {\n  if (!_Array$isArray(props.data) || props.data.length <= 0) {\n    return null;\n  }\n\n  var columnNames = _Object$keys(props.data[0]);\n\n  var rows = props.data;\n  return React.createElement(React.Fragment, null, React.createElement(_JSXStyle, {\n    id: \"1212954643\"\n  }, [\"table.jsx-1212954643{border-collapse:collapse;border-spacing:0;border-collapse:collapse;border-spacing:0;empty-cells:show;border:1px solid #cbcbcb;max-height:200px;overflow-y:scroll;}\", \"td.jsx-1212954643,th.jsx-1212954643{padding:0;border-left:1px solid #cbcbcb;border-width:0 0 0 1px;font-size:inherit;margin:0;overflow:visible;padding:0.5em 1em;}\", \"td.jsx-1212954643:first-child,th.jsx-1212954643:first-child{border-left-width:0;}\", \"thead.jsx-1212954643{background-color:#e0e0e0;color:#000;text-align:left;vertical-align:bottom;}\"]), React.createElement(\"table\", {\n    className: \"jsx-1212954643\"\n  }, React.createElement(\"thead\", {\n    className: \"jsx-1212954643\"\n  }, React.createElement(\"tr\", {\n    className: \"jsx-1212954643\"\n  }, columnNames.map(function (column, idx) {\n    return React.createElement(\"th\", {\n      key: idx,\n      className: \"jsx-1212954643\"\n    }, column);\n  }))), React.createElement(\"tbody\", {\n    className: \"jsx-1212954643\"\n  }, rows.map(function (row, idx) {\n    return React.createElement(\"tr\", {\n      key: idx,\n      className: \"jsx-1212954643\"\n    }, columnNames.map(function (k, colIdx) {\n      return React.createElement(\"td\", {\n        key: colIdx,\n        className: \"jsx-1212954643\"\n      }, row[k]);\n    }));\n  }))));\n}; // Old style Zeppelin\n\n\nvar Message = function Message(props) {\n  switch (props.type) {\n    case \"HTML\":\n      return React.createElement(HTMLTransform, {\n        data: props.data\n      });\n\n    case \"TEXT\":\n      return React.createElement(Text, {\n        data: props.data\n      });\n\n    default:\n      return null;\n  }\n};\n\nvar Result = function Result(props) {\n  if (!props.result || props.result.msg === \"\") {\n    return null;\n  }\n\n  switch (props.result.type) {\n    case \"HTML\":\n      return React.createElement(HTMLTransform, {\n        data: props.result.msg\n      });\n\n    case \"TEXT\":\n      return React.createElement(Text, {\n        data: props.result.msg\n      });\n\n    case \"TABLE\":\n      if (!props.result.columnNames || !props.result.rows) {\n        var data = d3.tsvParse(props.result.msg);\n        return React.createElement(DSVTable, {\n          data: data\n        });\n      }\n\n      return React.createElement(HokeyTable, {\n        columnNames: props.result.columnNames,\n        rows: props.result.rows\n      });\n\n    default:\n      return null;\n  }\n};\n\nvar whichLanguage = function whichLanguage(source) {\n  if (/^%md/.test(source)) {\n    return \"markdown\";\n  }\n\n  if (/^%sql/.test(source)) {\n    return \"text/x-hive\";\n  }\n\n  if (/^%pig/.test(source)) {\n    return \"pig\";\n  }\n\n  if (/^%spark\\.pyspark/.test(source) || /^%pyspark/.test(source) || /^%python/.test(source)) {\n    return \"python\";\n  }\n\n  if (/^%sh/.test(source)) {\n    return \"shell\";\n  }\n\n  if (/^%spark/.test(source)) {\n    return \"text/x-scala\";\n  }\n\n  if (/^%r/.test(source)) {\n    return \"r\";\n  }\n\n  if (/^%html/.test(source)) {\n    return \"html\";\n  }\n\n  return \"text/x-scala\";\n};\n\nvar Paragraph = function Paragraph(props) {\n  var lang = whichLanguage(props.text);\n  var resultView = null;\n\n  if (props.result) {\n    resultView = React.createElement(Result, {\n      result: props.result\n    });\n  } else if (props.results && _Array$isArray(props.results.msg)) {\n    resultView = props.results.msg.map(function (item, idx) {\n      return React.createElement(Message, _extends({}, item, {\n        key: idx\n      }));\n    });\n  }\n\n  if (lang === \"markdown\") {\n    return React.createElement(\"div\", {\n      style: {\n        paddingBottom: \"10px\",\n        paddingTop: \"10px\"\n      }\n    }, resultView);\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Source, {\n    language: lang\n  }, props.text), React.createElement(\"div\", {\n    style: {\n      paddingBottom: \"10px\",\n      paddingTop: \"10px\"\n    }\n  }, resultView));\n};\n\nvar ZeppelinView = function ZeppelinView(props) {\n  return React.createElement(\"div\", {\n    style: {\n      paddingLeft: \"10px\"\n    }\n  }, React.createElement(\"h1\", null, props.notebook.name), props.notebook.paragraphs.map(function (p) {\n    return React.createElement(Paragraph, _extends({\n      key: p.id\n    }, p));\n  }));\n};\n\nexport default ZeppelinView;","map":null,"metadata":{},"sourceType":"module"}