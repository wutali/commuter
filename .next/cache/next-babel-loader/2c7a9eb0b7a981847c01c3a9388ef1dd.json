{"ast":null,"code":"import _Object$isFrozen from \"@babel/runtime-corejs2/core-js/object/is-frozen\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/defineProperty\";\nimport * as React from \"react\";\nimport { cloneDeep } from \"lodash\";\nvar NULL_MIMETYPE = \"text/vnd.plotly.v1+html\";\nvar MIMETYPE = \"application/vnd.plotly.v1+json\";\n/*\n * As part of the init notebook mode, Plotly sneaks a <script> tag in to load\n * the plotlyjs lib. We have already loaded this though, so we \"handle\" the\n * transform by doing nothing and returning null.\n */\n\nvar PlotlyNullTransform = function PlotlyNullTransform() {\n  return null;\n};\n\nPlotlyNullTransform.MIMETYPE = NULL_MIMETYPE;\n\nvar PlotlyTransform =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlotlyTransform, _React$Component);\n\n  function PlotlyTransform() {\n    var _this;\n\n    _classCallCheck(this, PlotlyTransform);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlotlyTransform).call(this));\n\n    _defineProperty(_assertThisInitialized(_this), \"props\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"plotDiv\", void 0);\n\n    _this.getFigure = _this.getFigure.bind(_assertThisInitialized(_this));\n    _this.plotDivRef = _this.plotDivRef.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PlotlyTransform, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Handle case of either string to be `JSON.parse`d or pure object\n      var figure = this.getFigure();\n      Plotly.newPlot(this.plotDiv, figure.data, figure.layout);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return this.props.data !== nextProps.data;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var figure = this.getFigure();\n      this.plotDiv.data = figure.data;\n      this.plotDiv.layout = figure.layout;\n      Plotly.redraw(this.plotDiv);\n    }\n  }, {\n    key: \"plotDivRef\",\n    value: function plotDivRef(plotDiv) {\n      if (plotDiv) {\n        this.plotDiv = plotDiv;\n      }\n    }\n  }, {\n    key: \"getFigure\",\n    value: function getFigure() {\n      var figure = this.props.data;\n\n      if (typeof figure === \"string\") {\n        return JSON.parse(figure);\n      } // The Plotly API *mutates* the figure to include a UID, which means\n      // they won't take our frozen objects\n\n\n      if (_Object$isFrozen(figure)) {\n        return cloneDeep(figure);\n      }\n\n      return figure;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$getFigure = this.getFigure(),\n          layout = _this$getFigure.layout;\n\n      var style = {};\n\n      if (layout && layout.height && !layout.autosize) {\n        style.height = layout.height;\n      } // $FlowFixMe: Add typings to ref.\n\n\n      return React.createElement(\"div\", {\n        ref: this.plotDivRef,\n        style: style\n      });\n    }\n  }]);\n\n  return PlotlyTransform;\n}(React.Component);\n\n_defineProperty(PlotlyTransform, \"MIMETYPE\", MIMETYPE);\n\nexport { PlotlyNullTransform };\nexport default PlotlyTransform;","map":{"version":3,"sources":["/home/wutali/Workspace/wutali/commuter/transforms/PlotlyTransform.js"],"names":["React","cloneDeep","NULL_MIMETYPE","MIMETYPE","PlotlyNullTransform","PlotlyTransform","getFigure","bind","plotDivRef","figure","Plotly","newPlot","plotDiv","data","layout","nextProps","props","redraw","JSON","parse","style","height","autosize","Component"],"mappings":";;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,QAA1B;AAYA,IAAMC,aAAa,GAAG,yBAAtB;AACA,IAAMC,QAAQ,GAAG,gCAAjB;AAEA;;;;;;AAKA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAM,IAAN;AAAA,CAA5B;;AACAA,mBAAmB,CAACD,QAApB,GAA+BD,aAA/B;;IAEMG,e;;;;;AAMJ,6BAAoB;AAAA;;AAAA;;AAClB;;AADkB;;AAAA;;AAElB,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,+BAAjB;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBD,IAAhB,+BAAlB;AAHkB;AAInB;;;;wCAEyB;AACxB;AACA,UAAME,MAAM,GAAG,KAAKH,SAAL,EAAf;AACAI,MAAAA,MAAM,CAACC,OAAP,CAAe,KAAKC,OAApB,EAA6BH,MAAM,CAACI,IAApC,EAA0CJ,MAAM,CAACK,MAAjD;AACD;;;0CAEqBC,S,EAA2B;AAC/C,aAAO,KAAKC,KAAL,CAAWH,IAAX,KAAoBE,SAAS,CAACF,IAArC;AACD;;;yCAEoB;AACnB,UAAMJ,MAAM,GAAG,KAAKH,SAAL,EAAf;AACA,WAAKM,OAAL,CAAaC,IAAb,GAAoBJ,MAAM,CAACI,IAA3B;AACA,WAAKD,OAAL,CAAaE,MAAb,GAAsBL,MAAM,CAACK,MAA7B;AACAJ,MAAAA,MAAM,CAACO,MAAP,CAAc,KAAKL,OAAnB;AACD;;;+BAEUA,O,EAAyC;AAClD,UAAIA,OAAJ,EAAa;AACX,aAAKA,OAAL,GAAeA,OAAf;AACD;AACF;;;gCAEmB;AAClB,UAAMH,MAAM,GAAG,KAAKO,KAAL,CAAWH,IAA1B;;AACA,UAAI,OAAOJ,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAOS,IAAI,CAACC,KAAL,CAAWV,MAAX,CAAP;AACD,OAJiB,CAMlB;AACA;;;AACA,UAAI,iBAAgBA,MAAhB,CAAJ,EAA6B;AAC3B,eAAOR,SAAS,CAACQ,MAAD,CAAhB;AACD;;AACD,aAAOA,MAAP;AACD;;;6BAEQ;AAAA,4BACY,KAAKH,SAAL,EADZ;AAAA,UACCQ,MADD,mBACCA,MADD;;AAEP,UAAMM,KAAK,GAAG,EAAd;;AACA,UAAIN,MAAM,IAAIA,MAAM,CAACO,MAAjB,IAA2B,CAACP,MAAM,CAACQ,QAAvC,EAAiD;AAC/CF,QAAAA,KAAK,CAACC,MAAN,GAAeP,MAAM,CAACO,MAAtB;AACD,OALM,CAMP;;;AACA,aAAO;AAAK,QAAA,GAAG,EAAE,KAAKb,UAAf;AAA2B,QAAA,KAAK,EAAEY;AAAlC,QAAP;AACD;;;;EAzD2BpB,KAAK,CAACuB,S;;gBAA9BlB,e,cAIcF,Q;;AAwDpB,SAASC,mBAAT;AACA,eAAeC,eAAf","sourcesContent":["/* @flow */\nimport * as React from \"react\";\nimport { cloneDeep } from \"lodash\";\n\ndeclare var Plotly: Object;\ntype Props = {\n  data: string | Object\n};\n\ndeclare class PlotlyHTMLElement extends HTMLElement {\n  data: Object;\n  layout: ?Object;\n}\n\nconst NULL_MIMETYPE = \"text/vnd.plotly.v1+html\";\nconst MIMETYPE = \"application/vnd.plotly.v1+json\";\n\n/*\n * As part of the init notebook mode, Plotly sneaks a <script> tag in to load\n * the plotlyjs lib. We have already loaded this though, so we \"handle\" the\n * transform by doing nothing and returning null.\n */\nconst PlotlyNullTransform = () => null;\nPlotlyNullTransform.MIMETYPE = NULL_MIMETYPE;\n\nclass PlotlyTransform extends React.Component<*> {\n  props: Props;\n  plotDiv: PlotlyHTMLElement;\n\n  static MIMETYPE = MIMETYPE;\n\n  constructor(): void {\n    super();\n    this.getFigure = this.getFigure.bind(this);\n    this.plotDivRef = this.plotDivRef.bind(this);\n  }\n\n  componentDidMount(): void {\n    // Handle case of either string to be `JSON.parse`d or pure object\n    const figure = this.getFigure();\n    Plotly.newPlot(this.plotDiv, figure.data, figure.layout);\n  }\n\n  shouldComponentUpdate(nextProps: Props): boolean {\n    return this.props.data !== nextProps.data;\n  }\n\n  componentDidUpdate() {\n    const figure = this.getFigure();\n    this.plotDiv.data = figure.data;\n    this.plotDiv.layout = figure.layout;\n    Plotly.redraw(this.plotDiv);\n  }\n\n  plotDivRef(plotDiv: PlotlyHTMLElement | null): void {\n    if (plotDiv) {\n      this.plotDiv = plotDiv;\n    }\n  }\n\n  getFigure(): Object {\n    const figure = this.props.data;\n    if (typeof figure === \"string\") {\n      return JSON.parse(figure);\n    }\n\n    // The Plotly API *mutates* the figure to include a UID, which means\n    // they won't take our frozen objects\n    if (Object.isFrozen(figure)) {\n      return cloneDeep(figure);\n    }\n    return figure;\n  }\n\n  render() {\n    const { layout } = this.getFigure();\n    const style = {};\n    if (layout && layout.height && !layout.autosize) {\n      style.height = layout.height;\n    }\n    // $FlowFixMe: Add typings to ref.\n    return <div ref={this.plotDivRef} style={style} />;\n  }\n}\n\nexport { PlotlyNullTransform };\nexport default PlotlyTransform;\n"]},"metadata":{},"sourceType":"module"}