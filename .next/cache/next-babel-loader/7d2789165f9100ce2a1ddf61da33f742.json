{"ast":null,"code":"import * as React from \"react\";\nimport { JSONTransform } from \"@nteract/transforms\";\nimport Immutable from \"immutable\";\nimport ZeppelinView from \"./zeppelin\";\nexport default (function (props) {\n  var content = JSON.parse(props.entry.content);\n\n  try {\n    // Zeppelin notebooks are called note.json, we'll go ahead and render them\n    if (props.entry.name === \"note.json\") {\n      return React.createElement(ZeppelinView, {\n        notebook: content\n      });\n    }\n\n    return React.createElement(JSONTransform, {\n      data: content,\n      metadata: Immutable.Map({\n        expanded: true\n      })\n    });\n  } catch (e) {\n    return React.createElement(React.Fragment, null, React.createElement(\"h1\", null, \"Failed to parse Zeppelin Notebook\"), React.createElement(\"pre\", null, e.toString()), React.createElement(\"code\", null, props.entry.content));\n  }\n});","map":{"version":3,"sources":["/home/wutali/Workspace/wutali/commuter/components/contents/json.js"],"names":["React","JSONTransform","Immutable","ZeppelinView","props","content","JSON","parse","entry","name","Map","expanded","e","toString"],"mappings":"AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAOC,YAAP,MAAyB,YAAzB;AAEA,gBAAe,UAACC,KAAD,EAAc;AAC3B,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,KAAN,CAAYH,OAAvB,CAAhB;;AACA,MAAI;AACF;AACA,QAAID,KAAK,CAACI,KAAN,CAAYC,IAAZ,KAAqB,WAAzB,EAAsC;AACpC,aAAO,oBAAC,YAAD;AAAc,QAAA,QAAQ,EAAEJ;AAAxB,QAAP;AACD;;AAED,WACE,oBAAC,aAAD;AACE,MAAA,IAAI,EAAEA,OADR;AAEE,MAAA,QAAQ,EAAEH,SAAS,CAACQ,GAAV,CAAc;AACtBC,QAAAA,QAAQ,EAAE;AADY,OAAd;AAFZ,MADF;AAQD,GAdD,CAcE,OAAOC,CAAP,EAAU;AACV,WACE,oBAAC,KAAD,CAAO,QAAP,QACE,oEADF,EAEE,iCAAMA,CAAC,CAACC,QAAF,EAAN,CAFF,EAGE,kCAAOT,KAAK,CAACI,KAAN,CAAYH,OAAnB,CAHF,CADF;AAOD;AACF,CAzBD","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport { JSONTransform } from \"@nteract/transforms\";\nimport Immutable from \"immutable\";\n\nimport ZeppelinView from \"./zeppelin\";\n\nexport default (props: *) => {\n  const content = JSON.parse(props.entry.content);\n  try {\n    // Zeppelin notebooks are called note.json, we'll go ahead and render them\n    if (props.entry.name === \"note.json\") {\n      return <ZeppelinView notebook={content} />;\n    }\n\n    return (\n      <JSONTransform\n        data={content}\n        metadata={Immutable.Map({\n          expanded: true\n        })}\n      />\n    );\n  } catch (e) {\n    return (\n      <React.Fragment>\n        <h1>Failed to parse Zeppelin Notebook</h1>\n        <pre>{e.toString()}</pre>\n        <code>{props.entry.content}</code>\n      </React.Fragment>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}